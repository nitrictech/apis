// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/event/v1/event.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceClient interface {
	// Publishes an message to a given topic
	Publish(ctx context.Context, in *EventPublishRequest, opts ...grpc.CallOption) (*EventPublishResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) Publish(ctx context.Context, in *EventPublishRequest, opts ...grpc.CallOption) (*EventPublishResponse, error) {
	out := new(EventPublishResponse)
	err := c.cc.Invoke(ctx, "/nitric.event.v1.EventService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
// All implementations should embed UnimplementedEventServiceServer
// for forward compatibility
type EventServiceServer interface {
	// Publishes an message to a given topic
	Publish(context.Context, *EventPublishRequest) (*EventPublishResponse, error)
}

// UnimplementedEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (UnimplementedEventServiceServer) Publish(context.Context, *EventPublishRequest) (*EventPublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}

// UnsafeEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceServer will
// result in compilation errors.
type UnsafeEventServiceServer interface {
	mustEmbedUnimplementedEventServiceServer()
}

func RegisterEventServiceServer(s grpc.ServiceRegistrar, srv EventServiceServer) {
	s.RegisterService(&EventService_ServiceDesc, srv)
}

func _EventService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventPublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.event.v1.EventService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).Publish(ctx, req.(*EventPublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventService_ServiceDesc is the grpc.ServiceDesc for EventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.event.v1.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event/v1/event.proto",
}

// TopicServiceClient is the client API for TopicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopicServiceClient interface {
	// Return a list of existing topics in the provider environment
	List(ctx context.Context, in *TopicListRequest, opts ...grpc.CallOption) (*TopicListResponse, error)
}

type topicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTopicServiceClient(cc grpc.ClientConnInterface) TopicServiceClient {
	return &topicServiceClient{cc}
}

func (c *topicServiceClient) List(ctx context.Context, in *TopicListRequest, opts ...grpc.CallOption) (*TopicListResponse, error) {
	out := new(TopicListResponse)
	err := c.cc.Invoke(ctx, "/nitric.event.v1.TopicService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopicServiceServer is the server API for TopicService service.
// All implementations should embed UnimplementedTopicServiceServer
// for forward compatibility
type TopicServiceServer interface {
	// Return a list of existing topics in the provider environment
	List(context.Context, *TopicListRequest) (*TopicListResponse, error)
}

// UnimplementedTopicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTopicServiceServer struct {
}

func (UnimplementedTopicServiceServer) List(context.Context, *TopicListRequest) (*TopicListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeTopicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopicServiceServer will
// result in compilation errors.
type UnsafeTopicServiceServer interface {
	mustEmbedUnimplementedTopicServiceServer()
}

func RegisterTopicServiceServer(s grpc.ServiceRegistrar, srv TopicServiceServer) {
	s.RegisterService(&TopicService_ServiceDesc, srv)
}

func _TopicService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopicServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.event.v1.TopicService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopicServiceServer).List(ctx, req.(*TopicListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TopicService_ServiceDesc is the grpc.ServiceDesc for TopicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.event.v1.TopicService",
	HandlerType: (*TopicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _TopicService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event/v1/event.proto",
}

// DeadLetterServiceClient is the client API for DeadLetterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeadLetterServiceClient interface {
	// Receive dead-letter messages(s)
	Receive(ctx context.Context, in *DeadLetterReceiveRequest, opts ...grpc.CallOption) (*DeadLetterReceiveResponse, error)
	// Complete an event previously popped from a queue
	Complete(ctx context.Context, in *DeadLetterCompleteRequest, opts ...grpc.CallOption) (*DeadLetterCompleteResponse, error)
}

type deadLetterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeadLetterServiceClient(cc grpc.ClientConnInterface) DeadLetterServiceClient {
	return &deadLetterServiceClient{cc}
}

func (c *deadLetterServiceClient) Receive(ctx context.Context, in *DeadLetterReceiveRequest, opts ...grpc.CallOption) (*DeadLetterReceiveResponse, error) {
	out := new(DeadLetterReceiveResponse)
	err := c.cc.Invoke(ctx, "/nitric.event.v1.DeadLetterService/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deadLetterServiceClient) Complete(ctx context.Context, in *DeadLetterCompleteRequest, opts ...grpc.CallOption) (*DeadLetterCompleteResponse, error) {
	out := new(DeadLetterCompleteResponse)
	err := c.cc.Invoke(ctx, "/nitric.event.v1.DeadLetterService/Complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeadLetterServiceServer is the server API for DeadLetterService service.
// All implementations should embed UnimplementedDeadLetterServiceServer
// for forward compatibility
type DeadLetterServiceServer interface {
	// Receive dead-letter messages(s)
	Receive(context.Context, *DeadLetterReceiveRequest) (*DeadLetterReceiveResponse, error)
	// Complete an event previously popped from a queue
	Complete(context.Context, *DeadLetterCompleteRequest) (*DeadLetterCompleteResponse, error)
}

// UnimplementedDeadLetterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDeadLetterServiceServer struct {
}

func (UnimplementedDeadLetterServiceServer) Receive(context.Context, *DeadLetterReceiveRequest) (*DeadLetterReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedDeadLetterServiceServer) Complete(context.Context, *DeadLetterCompleteRequest) (*DeadLetterCompleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}

// UnsafeDeadLetterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeadLetterServiceServer will
// result in compilation errors.
type UnsafeDeadLetterServiceServer interface {
	mustEmbedUnimplementedDeadLetterServiceServer()
}

func RegisterDeadLetterServiceServer(s grpc.ServiceRegistrar, srv DeadLetterServiceServer) {
	s.RegisterService(&DeadLetterService_ServiceDesc, srv)
}

func _DeadLetterService_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeadLetterReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeadLetterServiceServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.event.v1.DeadLetterService/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeadLetterServiceServer).Receive(ctx, req.(*DeadLetterReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeadLetterService_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeadLetterCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeadLetterServiceServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nitric.event.v1.DeadLetterService/Complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeadLetterServiceServer).Complete(ctx, req.(*DeadLetterCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeadLetterService_ServiceDesc is the grpc.ServiceDesc for DeadLetterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeadLetterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nitric.event.v1.DeadLetterService",
	HandlerType: (*DeadLetterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _DeadLetterService_Receive_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _DeadLetterService_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/event/v1/event.proto",
}
