// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/storage/v1/storage.proto

package io.nitric.proto.storage.v1;

public interface StoragePreSignUrlRequestOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nitric.storage.v1.StoragePreSignUrlRequest)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Nitric name of the bucket to retrieve from
   *  this will be automatically resolved to the provider specific bucket identifier.
   * </pre>
   *
   * <code>string bucket_name = 1 [(.validate.rules) = { ... }</code>
   * @return The bucketName.
   */
  java.lang.String getBucketName();
  /**
   * <pre>
   * Nitric name of the bucket to retrieve from
   *  this will be automatically resolved to the provider specific bucket identifier.
   * </pre>
   *
   * <code>string bucket_name = 1 [(.validate.rules) = { ... }</code>
   * @return The bytes for bucketName.
   */
  com.google.protobuf.ByteString
      getBucketNameBytes();

  /**
   * <pre>
   * Key of item to generate the signed URL for.
   * The URL and the token it contains will only be valid for operations on this resource specifically.
   * </pre>
   *
   * <code>string key = 2 [(.validate.rules) = { ... }</code>
   * @return The key.
   */
  java.lang.String getKey();
  /**
   * <pre>
   * Key of item to generate the signed URL for.
   * The URL and the token it contains will only be valid for operations on this resource specifically.
   * </pre>
   *
   * <code>string key = 2 [(.validate.rules) = { ... }</code>
   * @return The bytes for key.
   */
  com.google.protobuf.ByteString
      getKeyBytes();

  /**
   * <code>.nitric.storage.v1.StoragePreSignUrlRequest.Operation operation = 3;</code>
   * @return The enum numeric value on the wire for operation.
   */
  int getOperationValue();
  /**
   * <code>.nitric.storage.v1.StoragePreSignUrlRequest.Operation operation = 3;</code>
   * @return The operation.
   */
  io.nitric.proto.storage.v1.StoragePreSignUrlRequest.Operation getOperation();

  /**
   * <pre>
   * Expiry time in seconds for the token included in the signed URL.
   *  Time starts from when the access token is generated, not when this request is made.
   *  e.g. time.Now().Add(expiry * time.Second) on the server
   * </pre>
   *
   * <code>uint32 expiry = 4;</code>
   * @return The expiry.
   */
  int getExpiry();
}
