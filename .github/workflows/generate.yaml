name: Generate and version base SDKs

# Only run one of these workflows at a time
# --------------
# Removing this will result in races between workflows directly
# modifying the repostory (DO NOT REMOVE OR CHANGE!)
concurrency: generate

on:
  repository_dispatch:
    types: [generate]

jobs:
  # Generate the SDKs
  generate:
    # Ensure they share a concurrency group
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.NITRIC_BOT_TOKEN }}
          fetch-depth: 0
      # Setup git identity
      - name: Git Identity
        run: |
          git config --global user.name 'nitric-bot[bot]'
          git config --global user.email 'maintainers@nitric.io'
      # Install protoc
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.16.7
      # Setup Java
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      # Setup Node
      - name: Use Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14
          registry-url: 'https://registry.npmjs.org'
          always-auth: true
      - name: Cache Yarn Cache
        uses: actions/cache@v2
        with:
          path: './node/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
      # Setup Python
      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      # Setup C#
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          source-url: https://api.nuget.org/v3/index.json
          dotnet-version: 5.0.x

      - name: Download contracts
        run: |
          curl -L https://github.com/nitrictech/nitric/releases/download/${{github.event.client_payload.tag_name}}/contracts.tgz -o contracts.tgz
          tar xvzf contracts.tgz
          rm contracts.tgz

      # Run Generation scripts
      # This should run scripts for all available languages
      - name: Generate Sources
        run: make

      # Commit sources to develop branch
      - name: Commit sources to develop
        run: |
          git fetch
          git checkout develop
          git add -A
          git commit --allow-empty -a -m "Updating autogenerated SDKs"

      # We want to fail if the tag already exists before pushing to origin
      # This will avoid re-publish of old releases and ensure releases are immutable
      - name: Tag release candidate
        if: "github.event.client_payload.prerelease"
        run: |
          git tag ${{ github.event.client_payload.tag_name }}
          git push origin develop ${{ github.event.client_payload.tag_name }}

      # If this is not a pre-release merge develop into main
      # We want to fail if the tag already exists before pushing to origin
      - name: Merge to main
        if: "!github.event.client_payload.prerelease"
        run: |
          git checkout main
          git merge --no-ff --allow-unrelated-histories -m "Release ${{ github.event.client_payload.tag_name }}" develop
          git tag ${{ github.event.client_payload.tag_name }}
          git push origin main develop ${{ github.event.client_payload.tag_name }}


  # Create the release
  # This will use information from generate to create the release
  release:
    if: "!github.event.client_payload.prerelease"
    needs: generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: main
          token: ${{ secrets.NITRIC_BOT_TOKEN }}
      - name: Create production release
        id: create_release
        uses: actions/create-release@v1
        env:
          # Use NITRIC_BOT_TOKEN here to
          # trigger release 'published' workflows
          GITHUB_TOKEN: ${{ secrets.NITRIC_BOT_TOKEN }}
        with:
          prerelease: false
          tag_name: ${{ github.event.client_payload.tag_name }}
          release_name: Release ${{ github.event.client_payload.tag_name }}

  # Create the release
  # This will use information from generate to create the release
  release-rc:
    if: "github.event.client_payload.prerelease"
    needs: generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: develop
          token: ${{ secrets.NITRIC_BOT_TOKEN }}
      - name: Create RC release
        id: create_release
        uses: actions/create-release@v1
        env:
          # Use NITRIC_BOT_TOKEN here to
          # trigger release 'published' workflows
          GITHUB_TOKEN: ${{ secrets.NITRIC_BOT_TOKEN }}
        with:
          prerelease: true
          tag_name: ${{ github.event.client_payload.tag_name }}
          release_name: Release Candidate ${{ github.event.client_payload.tag_name }}

    

    
