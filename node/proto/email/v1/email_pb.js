// source: proto/email/v1/email.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var validate_validate_pb = require('../../../validate/validate_pb.js');
goog.object.extend(proto, validate_validate_pb);
goog.exportSymbol('proto.nitric.email.v1.EmailBody', null, global);
goog.exportSymbol('proto.nitric.email.v1.EmailSendRequest', null, global);
goog.exportSymbol('proto.nitric.email.v1.EmailSendResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.email.v1.EmailBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.email.v1.EmailBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.email.v1.EmailBody.displayName = 'proto.nitric.email.v1.EmailBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.email.v1.EmailSendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nitric.email.v1.EmailSendRequest.repeatedFields_, null);
};
goog.inherits(proto.nitric.email.v1.EmailSendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.email.v1.EmailSendRequest.displayName = 'proto.nitric.email.v1.EmailSendRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nitric.email.v1.EmailSendResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nitric.email.v1.EmailSendResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nitric.email.v1.EmailSendResponse.displayName = 'proto.nitric.email.v1.EmailSendResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.email.v1.EmailBody.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.email.v1.EmailBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.email.v1.EmailBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.email.v1.EmailBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    html: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.email.v1.EmailBody}
 */
proto.nitric.email.v1.EmailBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.email.v1.EmailBody;
  return proto.nitric.email.v1.EmailBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.email.v1.EmailBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.email.v1.EmailBody}
 */
proto.nitric.email.v1.EmailBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHtml(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.email.v1.EmailBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.email.v1.EmailBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.email.v1.EmailBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.email.v1.EmailBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHtml();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string text = 1;
 * @return {string}
 */
proto.nitric.email.v1.EmailBody.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.email.v1.EmailBody} returns this
 */
proto.nitric.email.v1.EmailBody.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string html = 2;
 * @return {string}
 */
proto.nitric.email.v1.EmailBody.prototype.getHtml = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.email.v1.EmailBody} returns this
 */
proto.nitric.email.v1.EmailBody.prototype.setHtml = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nitric.email.v1.EmailSendRequest.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.email.v1.EmailSendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.email.v1.EmailSendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.email.v1.EmailSendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    toList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    ccList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    bccList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    subject: jspb.Message.getFieldWithDefault(msg, 5, ""),
    body: (f = msg.getBody()) && proto.nitric.email.v1.EmailBody.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.email.v1.EmailSendRequest}
 */
proto.nitric.email.v1.EmailSendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.email.v1.EmailSendRequest;
  return proto.nitric.email.v1.EmailSendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.email.v1.EmailSendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.email.v1.EmailSendRequest}
 */
proto.nitric.email.v1.EmailSendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addCc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addBcc(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 6:
      var value = new proto.nitric.email.v1.EmailBody;
      reader.readMessage(value,proto.nitric.email.v1.EmailBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.email.v1.EmailSendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.email.v1.EmailSendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.email.v1.EmailSendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getToList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getCcList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getBccList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
  f = message.getSubject();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nitric.email.v1.EmailBody.serializeBinaryToWriter
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string to = 2;
 * @return {!Array<string>}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.getToList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.setToList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.addTo = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.clearToList = function() {
  return this.setToList([]);
};


/**
 * repeated string cc = 3;
 * @return {!Array<string>}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.getCcList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.setCcList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.addCc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.clearCcList = function() {
  return this.setCcList([]);
};


/**
 * repeated string bcc = 4;
 * @return {!Array<string>}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.getBccList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.setBccList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.addBcc = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.clearBccList = function() {
  return this.setBccList([]);
};


/**
 * optional string subject = 5;
 * @return {string}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.setSubject = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional EmailBody body = 6;
 * @return {?proto.nitric.email.v1.EmailBody}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.getBody = function() {
  return /** @type{?proto.nitric.email.v1.EmailBody} */ (
    jspb.Message.getWrapperField(this, proto.nitric.email.v1.EmailBody, 6));
};


/**
 * @param {?proto.nitric.email.v1.EmailBody|undefined} value
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
*/
proto.nitric.email.v1.EmailSendRequest.prototype.setBody = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.nitric.email.v1.EmailSendRequest} returns this
 */
proto.nitric.email.v1.EmailSendRequest.prototype.clearBody = function() {
  return this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nitric.email.v1.EmailSendRequest.prototype.hasBody = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nitric.email.v1.EmailSendResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nitric.email.v1.EmailSendResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nitric.email.v1.EmailSendResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.email.v1.EmailSendResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nitric.email.v1.EmailSendResponse}
 */
proto.nitric.email.v1.EmailSendResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nitric.email.v1.EmailSendResponse;
  return proto.nitric.email.v1.EmailSendResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nitric.email.v1.EmailSendResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nitric.email.v1.EmailSendResponse}
 */
proto.nitric.email.v1.EmailSendResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nitric.email.v1.EmailSendResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nitric.email.v1.EmailSendResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nitric.email.v1.EmailSendResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nitric.email.v1.EmailSendResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


goog.object.extend(exports, proto.nitric.email.v1);
