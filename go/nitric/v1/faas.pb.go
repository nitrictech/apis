// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: proto/faas/v1/faas.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Messages the client is able to send to the server
type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client message ID, used to pair requests/responses
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Content:
	//	*ClientMessage_InitRequest
	//	*ClientMessage_TriggerResponse
	Content isClientMessage_Content `protobuf_oneof:"content"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{0}
}

func (x *ClientMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ClientMessage) GetContent() isClientMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ClientMessage) GetInitRequest() *InitRequest {
	if x, ok := x.GetContent().(*ClientMessage_InitRequest); ok {
		return x.InitRequest
	}
	return nil
}

func (x *ClientMessage) GetTriggerResponse() *TriggerResponse {
	if x, ok := x.GetContent().(*ClientMessage_TriggerResponse); ok {
		return x.TriggerResponse
	}
	return nil
}

type isClientMessage_Content interface {
	isClientMessage_Content()
}

type ClientMessage_InitRequest struct {
	// Client initialisation request
	InitRequest *InitRequest `protobuf:"bytes,2,opt,name=init_request,json=initRequest,proto3,oneof"`
}

type ClientMessage_TriggerResponse struct {
	// Client responsding with result of
	// a trigger
	TriggerResponse *TriggerResponse `protobuf:"bytes,3,opt,name=trigger_response,json=triggerResponse,proto3,oneof"`
}

func (*ClientMessage_InitRequest) isClientMessage_Content() {}

func (*ClientMessage_TriggerResponse) isClientMessage_Content() {}

// Messages the server is able to send to the client
type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server message ID, used to pair requests/responses
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Content:
	//	*ServerMessage_InitResponse
	//	*ServerMessage_TriggerRequest
	Content isServerMessage_Content `protobuf_oneof:"content"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{1}
}

func (x *ServerMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ServerMessage) GetContent() isServerMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *ServerMessage) GetInitResponse() *InitResponse {
	if x, ok := x.GetContent().(*ServerMessage_InitResponse); ok {
		return x.InitResponse
	}
	return nil
}

func (x *ServerMessage) GetTriggerRequest() *TriggerRequest {
	if x, ok := x.GetContent().(*ServerMessage_TriggerRequest); ok {
		return x.TriggerRequest
	}
	return nil
}

type isServerMessage_Content interface {
	isServerMessage_Content()
}

type ServerMessage_InitResponse struct {
	// Server responding
	// with client configuration details to an
	// InitRequest
	InitResponse *InitResponse `protobuf:"bytes,2,opt,name=init_response,json=initResponse,proto3,oneof"`
}

type ServerMessage_TriggerRequest struct {
	// Server requesting client to
	// process a trigger
	TriggerRequest *TriggerRequest `protobuf:"bytes,3,opt,name=trigger_request,json=triggerRequest,proto3,oneof"`
}

func (*ServerMessage_InitResponse) isServerMessage_Content() {}

func (*ServerMessage_TriggerRequest) isServerMessage_Content() {}

type ApiWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Api     string   `protobuf:"bytes,1,opt,name=api,proto3" json:"api,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Methods []string `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
}

func (x *ApiWorker) Reset() {
	*x = ApiWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiWorker) ProtoMessage() {}

func (x *ApiWorker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiWorker.ProtoReflect.Descriptor instead.
func (*ApiWorker) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{2}
}

func (x *ApiWorker) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *ApiWorker) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ApiWorker) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

type SubscriptionWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *SubscriptionWorker) Reset() {
	*x = SubscriptionWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionWorker) ProtoMessage() {}

func (x *SubscriptionWorker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionWorker.ProtoReflect.Descriptor instead.
func (*SubscriptionWorker) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{3}
}

func (x *SubscriptionWorker) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type ScheduleWorker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Types that are assignable to Cadence:
	//	*ScheduleWorker_Rate
	//	*ScheduleWorker_Cron
	Cadence isScheduleWorker_Cadence `protobuf_oneof:"cadence"`
}

func (x *ScheduleWorker) Reset() {
	*x = ScheduleWorker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleWorker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleWorker) ProtoMessage() {}

func (x *ScheduleWorker) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleWorker.ProtoReflect.Descriptor instead.
func (*ScheduleWorker) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{4}
}

func (x *ScheduleWorker) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (m *ScheduleWorker) GetCadence() isScheduleWorker_Cadence {
	if m != nil {
		return m.Cadence
	}
	return nil
}

func (x *ScheduleWorker) GetRate() *ScheduleRate {
	if x, ok := x.GetCadence().(*ScheduleWorker_Rate); ok {
		return x.Rate
	}
	return nil
}

func (x *ScheduleWorker) GetCron() *ScheduleCron {
	if x, ok := x.GetCadence().(*ScheduleWorker_Cron); ok {
		return x.Cron
	}
	return nil
}

type isScheduleWorker_Cadence interface {
	isScheduleWorker_Cadence()
}

type ScheduleWorker_Rate struct {
	Rate *ScheduleRate `protobuf:"bytes,10,opt,name=rate,proto3,oneof"`
}

type ScheduleWorker_Cron struct {
	Cron *ScheduleCron `protobuf:"bytes,11,opt,name=cron,proto3,oneof"`
}

func (*ScheduleWorker_Rate) isScheduleWorker_Cadence() {}

func (*ScheduleWorker_Cron) isScheduleWorker_Cadence() {}

type ScheduleRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate string `protobuf:"bytes,1,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *ScheduleRate) Reset() {
	*x = ScheduleRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleRate) ProtoMessage() {}

func (x *ScheduleRate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleRate.ProtoReflect.Descriptor instead.
func (*ScheduleRate) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{5}
}

func (x *ScheduleRate) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

type ScheduleCron struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cron string `protobuf:"bytes,1,opt,name=cron,proto3" json:"cron,omitempty"`
}

func (x *ScheduleCron) Reset() {
	*x = ScheduleCron{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleCron) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleCron) ProtoMessage() {}

func (x *ScheduleCron) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleCron.ProtoReflect.Descriptor instead.
func (*ScheduleCron) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{6}
}

func (x *ScheduleCron) GetCron() string {
	if x != nil {
		return x.Cron
	}
	return ""
}

// InitRequest - Identifies a worker as ready to recieve triggers
// This message will contain information on the type of triggers that
// a worker is capable of handling
type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of worker we are registering
	//
	// Types that are assignable to Worker:
	//	*InitRequest_Api
	//	*InitRequest_Subscription
	//	*InitRequest_Schedule
	Worker isInitRequest_Worker `protobuf_oneof:"Worker"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{7}
}

func (m *InitRequest) GetWorker() isInitRequest_Worker {
	if m != nil {
		return m.Worker
	}
	return nil
}

func (x *InitRequest) GetApi() *ApiWorker {
	if x, ok := x.GetWorker().(*InitRequest_Api); ok {
		return x.Api
	}
	return nil
}

func (x *InitRequest) GetSubscription() *SubscriptionWorker {
	if x, ok := x.GetWorker().(*InitRequest_Subscription); ok {
		return x.Subscription
	}
	return nil
}

func (x *InitRequest) GetSchedule() *ScheduleWorker {
	if x, ok := x.GetWorker().(*InitRequest_Schedule); ok {
		return x.Schedule
	}
	return nil
}

type isInitRequest_Worker interface {
	isInitRequest_Worker()
}

type InitRequest_Api struct {
	Api *ApiWorker `protobuf:"bytes,10,opt,name=api,proto3,oneof"`
}

type InitRequest_Subscription struct {
	Subscription *SubscriptionWorker `protobuf:"bytes,11,opt,name=subscription,proto3,oneof"`
}

type InitRequest_Schedule struct {
	Schedule *ScheduleWorker `protobuf:"bytes,12,opt,name=schedule,proto3,oneof"`
}

func (*InitRequest_Api) isInitRequest_Worker() {}

func (*InitRequest_Subscription) isInitRequest_Worker() {}

func (*InitRequest_Schedule) isInitRequest_Worker() {}

// Placeholder message
type InitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InitResponse) Reset() {
	*x = InitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitResponse) ProtoMessage() {}

func (x *InitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitResponse.ProtoReflect.Descriptor instead.
func (*InitResponse) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{8}
}

// The server has a trigger for the client to handle
type TriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data in the trigger
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Should we supply a mime type for the data?
	// Or rely on context?
	MimeType string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// The context of the trigger
	//
	// Types that are assignable to Context:
	//	*TriggerRequest_Http
	//	*TriggerRequest_Topic
	Context isTriggerRequest_Context `protobuf_oneof:"context"`
}

func (x *TriggerRequest) Reset() {
	*x = TriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerRequest) ProtoMessage() {}

func (x *TriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerRequest.ProtoReflect.Descriptor instead.
func (*TriggerRequest) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{9}
}

func (x *TriggerRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TriggerRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (m *TriggerRequest) GetContext() isTriggerRequest_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *TriggerRequest) GetHttp() *HttpTriggerContext {
	if x, ok := x.GetContext().(*TriggerRequest_Http); ok {
		return x.Http
	}
	return nil
}

func (x *TriggerRequest) GetTopic() *TopicTriggerContext {
	if x, ok := x.GetContext().(*TriggerRequest_Topic); ok {
		return x.Topic
	}
	return nil
}

type isTriggerRequest_Context interface {
	isTriggerRequest_Context()
}

type TriggerRequest_Http struct {
	Http *HttpTriggerContext `protobuf:"bytes,3,opt,name=http,proto3,oneof"`
}

type TriggerRequest_Topic struct {
	Topic *TopicTriggerContext `protobuf:"bytes,4,opt,name=topic,proto3,oneof"`
}

func (*TriggerRequest_Http) isTriggerRequest_Context() {}

func (*TriggerRequest_Topic) isTriggerRequest_Context() {}

type HeaderValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *HeaderValue) Reset() {
	*x = HeaderValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderValue) ProtoMessage() {}

func (x *HeaderValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderValue.ProtoReflect.Descriptor instead.
func (*HeaderValue) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{10}
}

func (x *HeaderValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type QueryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *QueryValue) Reset() {
	*x = QueryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValue) ProtoMessage() {}

func (x *QueryValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValue.ProtoReflect.Descriptor instead.
func (*QueryValue) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{11}
}

func (x *QueryValue) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type HttpTriggerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The request method
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// The path of the request
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// The old request headers (preserving for backwards compatibility)
	// TODO: Remove in 1.0
	//
	// Deprecated: Do not use.
	HeadersOld map[string]string `protobuf:"bytes,3,rep,name=headers_old,json=headersOld,proto3" json:"headers_old,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The old query params (preserving for backwards compatibility)
	// TODO: Remove in 1.0
	//
	// Deprecated: Do not use.
	QueryParamsOld map[string]string `protobuf:"bytes,4,rep,name=query_params_old,json=queryParamsOld,proto3" json:"query_params_old,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP request headers
	Headers map[string]*HeaderValue `protobuf:"bytes,5,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// HTTP Query params
	QueryParams map[string]*QueryValue `protobuf:"bytes,6,rep,name=query_params,json=queryParams,proto3" json:"query_params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpTriggerContext) Reset() {
	*x = HttpTriggerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpTriggerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpTriggerContext) ProtoMessage() {}

func (x *HttpTriggerContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpTriggerContext.ProtoReflect.Descriptor instead.
func (*HttpTriggerContext) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{12}
}

func (x *HttpTriggerContext) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpTriggerContext) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Deprecated: Do not use.
func (x *HttpTriggerContext) GetHeadersOld() map[string]string {
	if x != nil {
		return x.HeadersOld
	}
	return nil
}

// Deprecated: Do not use.
func (x *HttpTriggerContext) GetQueryParamsOld() map[string]string {
	if x != nil {
		return x.QueryParamsOld
	}
	return nil
}

func (x *HttpTriggerContext) GetHeaders() map[string]*HeaderValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpTriggerContext) GetQueryParams() map[string]*QueryValue {
	if x != nil {
		return x.QueryParams
	}
	return nil
}

type TopicTriggerContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The topic the message was published for
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *TopicTriggerContext) Reset() {
	*x = TopicTriggerContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicTriggerContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicTriggerContext) ProtoMessage() {}

func (x *TopicTriggerContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicTriggerContext.ProtoReflect.Descriptor instead.
func (*TopicTriggerContext) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{13}
}

func (x *TopicTriggerContext) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// The worker has successfully processed a trigger
type TriggerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data returned in the response
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The context of the request response
	// Typically this will be one to one with the Trigger Context
	// i.e. if you receive http context you may return http context
	//
	// Types that are assignable to Context:
	//	*TriggerResponse_Http
	//	*TriggerResponse_Topic
	Context isTriggerResponse_Context `protobuf_oneof:"context"`
}

func (x *TriggerResponse) Reset() {
	*x = TriggerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerResponse) ProtoMessage() {}

func (x *TriggerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerResponse.ProtoReflect.Descriptor instead.
func (*TriggerResponse) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{14}
}

func (x *TriggerResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (m *TriggerResponse) GetContext() isTriggerResponse_Context {
	if m != nil {
		return m.Context
	}
	return nil
}

func (x *TriggerResponse) GetHttp() *HttpResponseContext {
	if x, ok := x.GetContext().(*TriggerResponse_Http); ok {
		return x.Http
	}
	return nil
}

func (x *TriggerResponse) GetTopic() *TopicResponseContext {
	if x, ok := x.GetContext().(*TriggerResponse_Topic); ok {
		return x.Topic
	}
	return nil
}

type isTriggerResponse_Context interface {
	isTriggerResponse_Context()
}

type TriggerResponse_Http struct {
	// response to a http request
	Http *HttpResponseContext `protobuf:"bytes,10,opt,name=http,proto3,oneof"`
}

type TriggerResponse_Topic struct {
	// response to a topic trigger
	Topic *TopicResponseContext `protobuf:"bytes,11,opt,name=topic,proto3,oneof"`
}

func (*TriggerResponse_Http) isTriggerResponse_Context() {}

func (*TriggerResponse_Topic) isTriggerResponse_Context() {}

// Specific HttpResponse message
// Note this does not have to be handled by the
// User at all but they will have the option of control
// If they choose...
type HttpResponseContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Old HTTP response headers (deprecated)
	// TODO: Remove in 1.0
	//
	// Deprecated: Do not use.
	HeadersOld map[string]string `protobuf:"bytes,1,rep,name=headers_old,json=headersOld,proto3" json:"headers_old,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The HTTP status of the request
	Status int32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	// HTTP response headers
	Headers map[string]*HeaderValue `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HttpResponseContext) Reset() {
	*x = HttpResponseContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HttpResponseContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponseContext) ProtoMessage() {}

func (x *HttpResponseContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponseContext.ProtoReflect.Descriptor instead.
func (*HttpResponseContext) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{15}
}

// Deprecated: Do not use.
func (x *HttpResponseContext) GetHeadersOld() map[string]string {
	if x != nil {
		return x.HeadersOld
	}
	return nil
}

func (x *HttpResponseContext) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HttpResponseContext) GetHeaders() map[string]*HeaderValue {
	if x != nil {
		return x.Headers
	}
	return nil
}

// Specific event response message
// We do not accept responses for events
// only whether or not they were successfully processed
type TopicResponseContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Success status of the handled event
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TopicResponseContext) Reset() {
	*x = TopicResponseContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_faas_v1_faas_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopicResponseContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicResponseContext) ProtoMessage() {}

func (x *TopicResponseContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_faas_v1_faas_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicResponseContext.ProtoReflect.Descriptor instead.
func (*TopicResponseContext) Descriptor() ([]byte, []int) {
	return file_proto_faas_v1_faas_proto_rawDescGZIP(), []int{16}
}

func (x *TopicResponseContext) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_proto_faas_v1_faas_proto protoreflect.FileDescriptor

var file_proto_faas_v1_faas_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x61, 0x61, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x61, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x6e, 0x69, 0x74, 0x72,
	0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x0c,
	0x69, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c,
	0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x69, 0x6e, 0x69,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63,
	0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x4b, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x70, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x73, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x95, 0x01,
	0x0a, 0x0e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61,
	0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x61,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x22, 0xce, 0x01,
	0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x69, 0x74,
	0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x69, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x48, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x0e,
	0x0a, 0x0c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3,
	0x01, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x3b, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd9, 0x05,
	0x0a, 0x12, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x57, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6c, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x4f, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6c, 0x64, 0x12, 0x64, 0x0a, 0x10, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x4f, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4f, 0x6c, 0x64, 0x12,
	0x49, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6c, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x4f, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66,
	0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a,
	0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x13, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xa9, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39,
	0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x13, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x58, 0x0a, 0x0b, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6c, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x4f, 0x6c, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x4f, 0x6c, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x30, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x32, 0x60, 0x0a, 0x0b, 0x46, 0x61, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x1d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1d, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x63, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x6e, 0x69, 0x74, 0x72, 0x69,
	0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x66, 0x61, 0x61, 0x73, 0x2e, 0x76, 0x31, 0x42,
	0x0a, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x46, 0x61, 0x61, 0x73, 0x50, 0x01, 0x5a, 0x0c, 0x6e,
	0x69, 0x74, 0x72, 0x69, 0x63, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0xaa, 0x02, 0x14, 0x4e, 0x69,
	0x74, 0x72, 0x69, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x61, 0x73, 0x2e,
	0x76, 0x31, 0xca, 0x02, 0x14, 0x4e, 0x69, 0x74, 0x72, 0x69, 0x63, 0x5c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5c, 0x46, 0x61, 0x61, 0x73, 0x5c, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_faas_v1_faas_proto_rawDescOnce sync.Once
	file_proto_faas_v1_faas_proto_rawDescData = file_proto_faas_v1_faas_proto_rawDesc
)

func file_proto_faas_v1_faas_proto_rawDescGZIP() []byte {
	file_proto_faas_v1_faas_proto_rawDescOnce.Do(func() {
		file_proto_faas_v1_faas_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_faas_v1_faas_proto_rawDescData)
	})
	return file_proto_faas_v1_faas_proto_rawDescData
}

var file_proto_faas_v1_faas_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_faas_v1_faas_proto_goTypes = []interface{}{
	(*ClientMessage)(nil),        // 0: nitric.faas.v1.ClientMessage
	(*ServerMessage)(nil),        // 1: nitric.faas.v1.ServerMessage
	(*ApiWorker)(nil),            // 2: nitric.faas.v1.ApiWorker
	(*SubscriptionWorker)(nil),   // 3: nitric.faas.v1.SubscriptionWorker
	(*ScheduleWorker)(nil),       // 4: nitric.faas.v1.ScheduleWorker
	(*ScheduleRate)(nil),         // 5: nitric.faas.v1.ScheduleRate
	(*ScheduleCron)(nil),         // 6: nitric.faas.v1.ScheduleCron
	(*InitRequest)(nil),          // 7: nitric.faas.v1.InitRequest
	(*InitResponse)(nil),         // 8: nitric.faas.v1.InitResponse
	(*TriggerRequest)(nil),       // 9: nitric.faas.v1.TriggerRequest
	(*HeaderValue)(nil),          // 10: nitric.faas.v1.HeaderValue
	(*QueryValue)(nil),           // 11: nitric.faas.v1.QueryValue
	(*HttpTriggerContext)(nil),   // 12: nitric.faas.v1.HttpTriggerContext
	(*TopicTriggerContext)(nil),  // 13: nitric.faas.v1.TopicTriggerContext
	(*TriggerResponse)(nil),      // 14: nitric.faas.v1.TriggerResponse
	(*HttpResponseContext)(nil),  // 15: nitric.faas.v1.HttpResponseContext
	(*TopicResponseContext)(nil), // 16: nitric.faas.v1.TopicResponseContext
	nil,                          // 17: nitric.faas.v1.HttpTriggerContext.HeadersOldEntry
	nil,                          // 18: nitric.faas.v1.HttpTriggerContext.QueryParamsOldEntry
	nil,                          // 19: nitric.faas.v1.HttpTriggerContext.HeadersEntry
	nil,                          // 20: nitric.faas.v1.HttpTriggerContext.QueryParamsEntry
	nil,                          // 21: nitric.faas.v1.HttpResponseContext.HeadersOldEntry
	nil,                          // 22: nitric.faas.v1.HttpResponseContext.HeadersEntry
}
var file_proto_faas_v1_faas_proto_depIdxs = []int32{
	7,  // 0: nitric.faas.v1.ClientMessage.init_request:type_name -> nitric.faas.v1.InitRequest
	14, // 1: nitric.faas.v1.ClientMessage.trigger_response:type_name -> nitric.faas.v1.TriggerResponse
	8,  // 2: nitric.faas.v1.ServerMessage.init_response:type_name -> nitric.faas.v1.InitResponse
	9,  // 3: nitric.faas.v1.ServerMessage.trigger_request:type_name -> nitric.faas.v1.TriggerRequest
	5,  // 4: nitric.faas.v1.ScheduleWorker.rate:type_name -> nitric.faas.v1.ScheduleRate
	6,  // 5: nitric.faas.v1.ScheduleWorker.cron:type_name -> nitric.faas.v1.ScheduleCron
	2,  // 6: nitric.faas.v1.InitRequest.api:type_name -> nitric.faas.v1.ApiWorker
	3,  // 7: nitric.faas.v1.InitRequest.subscription:type_name -> nitric.faas.v1.SubscriptionWorker
	4,  // 8: nitric.faas.v1.InitRequest.schedule:type_name -> nitric.faas.v1.ScheduleWorker
	12, // 9: nitric.faas.v1.TriggerRequest.http:type_name -> nitric.faas.v1.HttpTriggerContext
	13, // 10: nitric.faas.v1.TriggerRequest.topic:type_name -> nitric.faas.v1.TopicTriggerContext
	17, // 11: nitric.faas.v1.HttpTriggerContext.headers_old:type_name -> nitric.faas.v1.HttpTriggerContext.HeadersOldEntry
	18, // 12: nitric.faas.v1.HttpTriggerContext.query_params_old:type_name -> nitric.faas.v1.HttpTriggerContext.QueryParamsOldEntry
	19, // 13: nitric.faas.v1.HttpTriggerContext.headers:type_name -> nitric.faas.v1.HttpTriggerContext.HeadersEntry
	20, // 14: nitric.faas.v1.HttpTriggerContext.query_params:type_name -> nitric.faas.v1.HttpTriggerContext.QueryParamsEntry
	15, // 15: nitric.faas.v1.TriggerResponse.http:type_name -> nitric.faas.v1.HttpResponseContext
	16, // 16: nitric.faas.v1.TriggerResponse.topic:type_name -> nitric.faas.v1.TopicResponseContext
	21, // 17: nitric.faas.v1.HttpResponseContext.headers_old:type_name -> nitric.faas.v1.HttpResponseContext.HeadersOldEntry
	22, // 18: nitric.faas.v1.HttpResponseContext.headers:type_name -> nitric.faas.v1.HttpResponseContext.HeadersEntry
	10, // 19: nitric.faas.v1.HttpTriggerContext.HeadersEntry.value:type_name -> nitric.faas.v1.HeaderValue
	11, // 20: nitric.faas.v1.HttpTriggerContext.QueryParamsEntry.value:type_name -> nitric.faas.v1.QueryValue
	10, // 21: nitric.faas.v1.HttpResponseContext.HeadersEntry.value:type_name -> nitric.faas.v1.HeaderValue
	0,  // 22: nitric.faas.v1.FaasService.TriggerStream:input_type -> nitric.faas.v1.ClientMessage
	1,  // 23: nitric.faas.v1.FaasService.TriggerStream:output_type -> nitric.faas.v1.ServerMessage
	23, // [23:24] is the sub-list for method output_type
	22, // [22:23] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_proto_faas_v1_faas_proto_init() }
func file_proto_faas_v1_faas_proto_init() {
	if File_proto_faas_v1_faas_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_faas_v1_faas_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleWorker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleCron); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeaderValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpTriggerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicTriggerContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HttpResponseContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_faas_v1_faas_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopicResponseContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_faas_v1_faas_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientMessage_InitRequest)(nil),
		(*ClientMessage_TriggerResponse)(nil),
	}
	file_proto_faas_v1_faas_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ServerMessage_InitResponse)(nil),
		(*ServerMessage_TriggerRequest)(nil),
	}
	file_proto_faas_v1_faas_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ScheduleWorker_Rate)(nil),
		(*ScheduleWorker_Cron)(nil),
	}
	file_proto_faas_v1_faas_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*InitRequest_Api)(nil),
		(*InitRequest_Subscription)(nil),
		(*InitRequest_Schedule)(nil),
	}
	file_proto_faas_v1_faas_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*TriggerRequest_Http)(nil),
		(*TriggerRequest_Topic)(nil),
	}
	file_proto_faas_v1_faas_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*TriggerResponse_Http)(nil),
		(*TriggerResponse_Topic)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_faas_v1_faas_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_faas_v1_faas_proto_goTypes,
		DependencyIndexes: file_proto_faas_v1_faas_proto_depIdxs,
		MessageInfos:      file_proto_faas_v1_faas_proto_msgTypes,
	}.Build()
	File_proto_faas_v1_faas_proto = out.File
	file_proto_faas_v1_faas_proto_rawDesc = nil
	file_proto_faas_v1_faas_proto_goTypes = nil
	file_proto_faas_v1_faas_proto_depIdxs = nil
}
